I learned how to use turtlesim(a ros2 package good for learning) it was quite simple actually 
1st i had to 1st install it using 
sudo apt update ros2
sudo apt install ros-humble-turtlesim

--this is for seeing list:-
ros2 pkg list

--to see exectutabe files--
ros2 pkg executables

--specific executables for turtlesim
 ros2 pkg executables turtlesim

--ok to launch it use 
ros2 run turtlesim turtlesim_node

--run this :- to control your turtle
ros2 run turtlesim turtle_teleop_key

then i learned that ros workes in nodes so here is something about nodes:-
for help:-
ros2 node-h

for list :-
ros2 node list

it will show you your current nodes(running):
input--/# ros2 node list
output-- /teleop_turtle
/turtlesim


to see the info of the turtlesim:-
ros2 node info /turtlesim

input-- ros2 node info /turtlesim
output--/turtlesim
  Subscribers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /turtle1/cmd_vel: geometry_msgs/msg/Twist
  Publishers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /turtle1/color_sensor: turtlesim/msg/Color
    /turtle1/pose: turtlesim/msg/Pose
  Service Servers:
    /clear: std_srvs/srv/Empty
    /kill: turtlesim/srv/Kill
    /reset: std_srvs/srv/Empty
    /spawn: turtlesim/srv/Spawn
    /turtle1/set_pen: turtlesim/srv/SetPen
    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute
    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative
    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters
    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters
    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters
    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
  Service Clients:

  Action Servers:
    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute
  Action Clients:


Then i learned about topics:-
topics is something wich connects nodes
there are publisher nodes and there are subscriber node


for listing out the topics
ros2 topic list

now if u run rqt_graph
u will see a well... rqt graph
(i assumes that it is simmiler to AFSM-diagrams).

for seening specific outputs we can run :

ros2 topic echo /turtle1/cmd_vel

input-- ros2 topic echo /turtle1/cmd_vel
output--linear:
  x: 2.0
  y: 0.0
  z: 0.0
angular:
  x: 0.0
  y: 0.0
  z: 0.0

to get the info
root@9cc8a1919a42:/# ros2 topic info /turtle1/cmd_vel
Type: geometry_msgs/msg/Twist
Publisher count: 1
Subscription count: 2

to see interface defination:-
ros2 interface show geometry_msgs/msg/Twist

input--root@9cc8a1919a42:/# ros2 interface show  geometry_msgs/msg/Twist
output--# This expresses velocity in free space broken into its linear and angular parts.

Vector3  linear
        float64 x
        float64 y
        float64 z
Vector3  angular
        float64 x
        float64 y
        float64 z
for info :
ros2 topic info turtle1/cmd_vel

root@2805c4a8871e:/# ros2 topic info /turtle1/cmd_vel
Type: geometry_msgs/msg/Twist
Publisher count: 1
Subscription count: 1

root@2805c4a8871e:/# ros2 interface show  geometry_msgs/msg/Twist
# This expresses velocity in free space broken into its linear and angular parts.

Vector3  linear
        float64 x
        float64 y
        float64 z
Vector3  angular
        float64 x
        float64 y
        float64 z

for publishing the topic:-
input root@2805c4a8871e:/# ros2 topic pub --once /turtle1/cmd_vel  geometry_msgs/msg/Twist "{linear: {x: 0.0,y: 0.0,z: 0.0},an
gular: {x: 0.0,y: 0.0,z: 0.0}}"
output-publisher: beginning loop
publishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0))


this is for publishing a loop:-
input root@2805c4a8871e:/#  ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist  "{linear: {x: 0.0,y: 0.0,z: 0.0}
,angular: {x: 0.0,y: 0.0,z: 1.8}}"
output:-publisher: beginning loop
publishing #1: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))

publishing #2: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))

publishing #3: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))

publishing #4: geometry_msgs.msg.Twist(linear=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=0.0), angular=geometry_msgs.msg.Vector3(x=0.0, y=0.0, z=1.8))....

this is for seeing the value:-
 ros2 topic echo /turtle1/pose

''''this is for the average rate'''
ros2 topic hz /turtle1/pose

Then i learned about services:-
Services are like server and client
Server needs to respond to send data

this is for services list:-
 ros2 service list
this is for type associated:-
ros2 service list-t

root@88b3b07d2a0a:/# ros2 service find std_srvs/srv/Empty
/clear
/reset
root@88b3b07d2a0a:/# ros2 interface show turtlesim/srv/spawn
Could not find the interface '/opt/ros/humble/share/turtlesim/srv/spawn.idl'
root@88b3b07d2a0a:/# ros2 interface show turtlesim/srv/Spawn
float32 x
float32 y
float32 theta
string name # Optional.  A unique name will be created and returned if this is empty
---
string name

this is for clearing the screen lines:-
ros2 service call /clear std_srvs/srv/Empty

This is for getting a new turtle:-
ros2 service call /spawn turtlesim/srv/Spawn "{x: 2, y: 3, theta: 0.2,name: ''}"

After that i learned about parameters:-
parameters are like input for the functions but for nodes:--

