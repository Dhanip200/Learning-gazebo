So the fromat of a launche file is:-ros2 launch <package_name><launch_file>
eg ros2 launch gazebo_tutorial gazebo.launch.py

Now we will be making an R2D2 usimg the links and stuff:-
typical structure is <?xml version="1.0"?>
  <robot name="robot_name">
  <link name="link_name">
    <visual>
    </visual>

    <collision>
    </collision>

    <inirtial>
    </inirtial>
</link>

<joint name="joint_name"...>
  <axis .../>
  <parant link .../>
  <child link .../>
  <origin ...>
  </joint>
</robot>


General Structure of a <link>:---
<link name="link_name">

  <!-- Visual element (OPTIONAL) -->
  <visual>
    <geometry> <!-- REQUIRED -->
      <!-- Geometry-specific tags go here -->
    </geometry>
    
    <origin rpy="r p y" xyz="x y z"/> <!-- OPTIONAL -->
    <material name="color_name"/>    <!-- OPTIONAL -->
  </visual>

  <!-- Collision element (OPTIONAL) -->
  <collision>
    <geometry> <!-- REQUIRED -->
      <!-- Geometry-specific tags go here -->
    </geometry>
    
    <origin rpy="r p y" xyz="x y z"/> <!-- OPTIONAL -->
  </collision>

  <!-- Inertial element (OPTIONAL) -->
  <inertial>
    <mass value="mass_in_kg"/>
    <inertia
      ixx="ixx" ixy="ixy" ixz="ixz"
      iyy="iyy" iyz="iyz"
      izz="izz"/>
  </inertial>

</link>



Types of Geometries used in URDF File
Units for the geometries are in Sl units, so meters for all lengths. For the mesh, the files types can be .stl or .dae files
<geometry>
<!-- Geometry Specific Code
</geometry>
Geometry
Geometry Specific Code
box--<box size="x y
sphere--<sphere radius="r"/>
cylinder--<cylinder radius="r" length="1"/>
mesh--<mesh filename="file_path" scale="x y z"/>



Origin - rpy and xyz
The origin is used to define the rotation [radians] using roll (x), pitch (y), yaw (z) and the translation [meters) using x, y, z relative to the link's coordinate frame. The order of rotation for rpy is ZYX, so first rotate about X axis, then Y axis and finally Z axis. The rotation operation is applied first and then the translation.
For visual and collision, origin describes how the geometry is transformed relative to the link's frame.
For inertial, origin describes the location of the center of mass relative to the link's frame.
<origin rpy="r py" xyz="x y z"/>
Axis Colors:
Axis
Color
X-Red
Y-Green
Z-Blue


Material
The material is used to define the colors and the transparency of the color by using rgba, normalized between 0 and 1.
<material name="color_name">
<color rgba="rg ba"/>
</material>
Some common colors:
color_name
rgba
red
1001
green
0101
blue
0011
yellow
1101
cyan
0111



Collision
The collision property can be used to describe a bounding shape around the link for collision detection. Usually, people use a simplified shape for this for faster calculation when detecting for collisions between other collision bounding shapes.
<collision> <!-- OPTIONAL -->
<geometry> <!-- REQUIRED -->
<!-- Geometry Specific Code -->
</geometry>
<origin rpy="r py" xyz="x y z"/> <!--
OPTIONAL
</collision>


We will create a folder called urdf inside ros_ws:-
1st step is connectin to our wifi properly and server so do this:-
'''bash
export DISPLAY=:0
'''
then run this:-
'''bash
sudo apt update

sudo apt install -y \
  libxcb-xinerama0 \
  libxkbcommon-x11-0 \
  libglu1-mesa \
  libxrender1 \
  libxrandr2 \
  libxi6 \
  libsm6 \
  libxext6 \
  x11-apps
'''


1st we will install the files for tutorial:-
'''bash
sudo apt update
sudo apt install ros-humble-urdf-tutorial
'''
them we will use this commond in order to see the files:-
'''bash
ls /opt/ros/humble/share/urdf_tutorial/urdf/
'''
(in my case it looks like this but u should choose accordingly:---01-myfirst.urdf
02-multipleshapes.urdf
03-origins.urdf
...
):-
'''bash
ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf
'''
(it will show u a cylander).



Origin and Axis
The origin describes the location of the child frame relative to the parent frame. The axis describes the axis of rotation for the joint.
<origin rpy="r py" xyz="x y z"/>
<axis rpy="r py" xyz="x y z"/>
Dynamics
The dyanamics include damping expressed in [Ns/m] and friction (static friction) expressed in [N].
<dynamics damping="damp_coef" friction="fric_coef"/>
Limit
Limits are for revolute and prismatic joints only. The lower and upper field are in radians or meters respectively, the effort is the max effort in [Nm], and velocity is max velocity [rad/s).
<limit lower="lower" upper="upper" effort="max_effort"
velocity="max_vel"/>
