Xacro files allow ypu to creare functions wich u can call in the URDF files
How to run xacro files... 

Xacro files::-
xacro model.xacro > model.urdf


2. Robot State Publisher
Use the robot_state_publisher to read the .urdf file (converted from a .xacro file) in a launch file. Run the xacro command to convert the .xacro to a .urdf, and pass it as the robot_description parameter.
from launch_ros.actions import Node
from launch.substitutions import Command
from launch_ros.parameter_descriptions import ParameterValue

path_to_urdf = 'path/to/your_robot.urdf.xacro'

robot_state_publisher_node = Node(
    package='robot_state_publisher',
    executable='robot_state_publisher',
    parameters=[{
        'robot_description': ParameterValue(
            Command(['xacro', path_to_urdf]),
            value_type=str
        )
    }]
)


3. URDF_Launch
Use the urdf_launch package to load the .xacro or .urdf file using an included launch file (display.launch.py).
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import PathJoinSubstitution
from launch_ros.substitutions import FindPackageShare

def generate_launch_description():
    ld = LaunchDescription()

    urdf_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            PathJoinSubstitution([
                FindPackageShare('urdf_launch'),
                'launch',
                'display.launch.py'
            ])
        ),
        launch_arguments={
            'urdf_package': 'turtlebot3_description',
            'urdf_package_path': PathJoinSubstitution([
                FindPackageShare('turtlebot3_description'),
                'urdf',
                'model_name.urdf'
            ])
        }.items()
    )

    ld.add_action(urdf_launch)
    return ld



Xacro Property
Xacro properties are useful when the same value is used in multiple places within a .xacro file. Defining a property once allows you to change its value in one location, and have that change automatically apply everywhere it's used.

<xacro:property name="property_name" value="..."/>


âœ… Property Usage
<... attribute="${property_name}" />


ðŸ’¡ Example
<xacro:property name="link_length" value="1.0"/>

<link name="example_link">
  <visual>
    <geometry>
      <box size="${link_length} ${link_length} ${link_length}"/>
    </geometry>
  </visual>
</link>
